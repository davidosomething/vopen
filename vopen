#!/usr/bin/env bash

# vopen v1.2.0
#
# Automatically determine whether to use vim or gvim and use a single instance
# Git commit messages will use a separate vim server called GIT
#
# Copyright (c) 2016 David O'Trakoun <me@davidosomething.com>
#

__vopen() {
  local _editor="${VOPEN_EDITOR:-vim}"
  local _visual="${VOPEN_VISUAL:-gvim}"
  local _default_command="${VOPEN_DEFAULT_COMMAND}"
  local _reuse_command="${VOPEN_REUSE_COMMAND:--remote-send \":call foreground()<CR>\"}"
  local _has_gui=false
  local _use_gui=true
  local _has_server=false
  local _use_server="${VOPEN_USE_SERVER:-true}"
  local _server_exists=''
  local _has_fork=true
  local _servername="${VOPEN_SERVERNAME:-VOPEN}"

  local _exe
  local _args
  local _server_arg=""
  local _files

  # which executable -----------------------------------------------------------

  if command -v "$_visual" >/dev/null 2>&1; then
    _has_gui=true
  fi

  if [ -z "$DISPLAY" ] || [[ $OSTYPE == darwin* ]]; then
    _has_gui=false
  fi

  if [ "$_has_gui" = "false" ] || [ "$VOPEN_USE_GUI" = "false" ]; then
    _use_gui=false
  fi

  # Override editor if env var provides, otherwise use vim/gvim
  if [ "$_use_gui" = true ] && [ "$_has_gui" = true ]; then
    _exe="$_visual"
  else
    _exe="$_editor"
  fi

  if [[ "$_exe" = *"vim" ]] || [[ "$_exe" = "nvr" ]]; then
    _has_server=true
  fi

  if [[ "$_exe" == *"nvim"* ]] || [ "$_exe" = "nyaovim" ] ; then
    _has_server=false
    _use_server=false
    _has_fork=false
  fi

  # --------------------------------------------------------------------------
  # arg parsing
  # --------------------------------------------------------------------------

  _args=""
  while [[ "$#" -gt 0 ]] && [[ ."$1" = .--* ]]; do
    case "$1" in
      "--")                   # file separator
        break                 # break out of while loop, continue to files
        ;;
      "--version")
        # vim ignores all else if version is specified, only need to send that
        eval "$_exe --version"
        break # known dead code path
        ;;
      "--nofork")             # never use server if nofork
        _use_server=false
        if [ "$_has_fork" = "true" ]; then
          _args="$_args --nofork"
        fi
        ;;
      "--noserver")           # don't use server at all, useful for sudoeditor
        _use_server=false
        ;;
      "--servername")         # custom servername
        shift                 # get next arg
        _servername="$1"
        ;;
      "--"*)                  # take any other args as they are
        _args="$_args $1"
        ;;
    esac
    shift
  done

  # --------------------------------------------------------------------------
  # file parsing
  # If there are still _args after the above...
  # --------------------------------------------------------------------------

  _files=""
  while [[ "$#" -gt 0 ]]; do
    _files="$_files \"$1\""
    case "$1" in
      *"MERGE_MSG"|*"COMMIT_EDITMSG")
        _use_server=false
        ;;
      "/etc/sudoers")
        echo "$0"
        ;;
    esac
    shift
  done

  # --------------------------------------------------------------------------
  # existing server
  # --------------------------------------------------------------------------

  if [ -n "$_servername" ] \
    && [ "$_has_server" = true ] \
    && [ "$_use_server" = true ]; then
    _server_exists=$( $_exe --serverlist | grep -n1 "$_servername" 2>/dev/null )
    _server_arg="--servername $_servername"

    # reuse server
    if [ "$_server_exists" != "" ]; then
      if [ "$_files" = "" ]; then
        _args="$_args $_reuse_command"
      else
        _args="$_args --remote-silent"
      fi

    # new server
    else
      if [ "$_files" = "" ]; then
        _args="$_args $_default_command"
      fi
    fi
  fi

  # --------------------------------------------------------------------------
  # execute
  # --------------------------------------------------------------------------

  if [ -n "$VOPEN_DEBUG" ]; then
    echo "$_exe $_server_arg $_args $_files"
  else
    eval "$_exe $_server_arg $_args $_files"
  fi
}

__vopen "$@"

