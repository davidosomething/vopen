#!/usr/bin/env bash

# vopen v1.0.0
#
# Automatically determine whether to use vim or gvim and use a single instance
# Git commit messages will use a separate vim server called GIT
#
# Copyright (c) 2015 David O'Trakoun <me@davidosomething.com>
#

_vopen() {
  local _vopen_editor="${VOPEN_EDITOR:-vim}"
  local _vopen_visual="${VOPEN_VISUAL:-gvim}"
  local has_gui=false
  local use_gui=true
  local has_server=false
  local use_server="${VOPEN_USE_SERVER:-true}"
  local server_exists=''
  local has_fork=true
  local servername="VOPEN"

  local executable
  local args
  local server_arg=""
  local files

  # which executable -----------------------------------------------------------

  if command -v "$_vopen_visual"; then
    has_gui=true
  fi

  if [ -z "$DISPLAY" ] || [[ $OSTYPE == darwin* ]]; then
    has_gui=false
  fi

  if [ "$has_gui" = "false" ] || [ "$VOPEN_USE_GUI" = "false" ]; then
    use_gui=false
  fi

  # Override editor if env var provides, otherwise use vim/gvim
  if [ "$use_gui" = true ] && [ "$has_gui" = true ]; then
    executable="$_vopen_visual"
  else
    executable="$_vopen_editor"
  fi

  if [[ "$executable" = *"vim" ]]; then
    has_server=true
  fi

  if [[ "$executable" == *"nvim"* ]] || [ "$executable" = "nyaovim" ] ; then
    has_server=false
    use_server=false
    has_fork=false
  fi

  # arg parsing ----------------------------------------------------------------
  args=""
  while [[ "$#" -gt 0 ]] && [[ ."$1" = .--* ]]; do
    case "$1" in
      "--")                   # file separator
        break                 # break out of while loop, continue to files
        ;;
      "--nofork")             # never use server if nofork
        use_server=false
        if [ "$has_fork" = "true" ]; then
          args="$args --nofork"
        fi
        ;;
      "--noserver")           # don't use server at all, useful for sudoeditor
        use_server=false
        ;;
      "--servername")         # custom servername
        shift                 # get next arg
        servername="$1"
        ;;
      "--"*)                  # take any other args as they are
        args="$args $1"
        ;;
    esac
    shift
  done

  # file parsing ---------------------------------------------------------------
  # If there are still args after the above...
  files=""
  while [[ "$#" -gt 0 ]]; do
    files="$files \"$1\""
    case "$1" in
      *"MERGE_MSG"|*"COMMIT_EDITMSG")
        use_server=false
        ;;
      "/etc/sudoers")
        echo "$0"
        ;;
    esac
    shift
  done

  # server use -----------------------------------------------------------------

  if [ -n "$servername" ] && [ "$has_server" = true ] && [ "$use_server" = true ]; then
    server_exists=$( $executable --serverlist | grep -n1 "$servername" 2>/dev/null )
    server_arg="--servername $servername"

    # reuse server
    if [ "$server_exists" != "" ]; then
      if [ "$files" = "" ]; then
        args="$args --remote-send \":call foreground()<CR>\""
      else
        args="$args --remote-silent"
      fi

    # new server
    else
      if [ "$files" = "" ]; then
        args="$args $VOPEN_DEFAULT_COMMAND"
      fi
    fi
  fi

  # execute --------------------------------------------------------------------
  eval "$executable $server_arg $args $files"
}

_vopen "$@"

